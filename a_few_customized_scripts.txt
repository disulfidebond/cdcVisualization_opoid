# list of 50 states was created by copying and pasting from Wikipidea, then spot-checking for accuracy and formatting

ARR50=($(<listOf50states.txt))
for i in "${ARR50[@]}" ; do
  CVAL=$(echo "https://en.wikipedia.org/wiki/List_of_counties_in_${i}") ; 
  curl -O ${CVAL} ; 
  PARSENAME=$(echo ${CVAL} | rev | cut -d/ -f1 | rev) ; 
  let RANDVAL=$RANDOM%4 ; 
  sleep $RANDVAL ; 
  grep '<td>' ${PARSENAME} > ${PARSENAME}.parsed ; 
done

####
# a list of City, County, State was extracted using perl

#!/usr/bin/perl -w
use Data::Dumper;

# UnComment both to have DataDumper output Hash as Key:Value
# $Data::Dumper::Useqq= 1;
# $Data::Dumper::Pair = " : ";

# uncomment and add appropriate values for input file
my $f = pop @ARGV;

open (my $fh, "<", $f) or die "cannot open file $!\n";


my @a;
# for my $line (<STDIN>) {
#	chomp $line;
#	push @a, $line;
# }

# close STDIN;
while (<$fh>) {
	chomp;
	push @a, $_;
}
close $fh;

my $aLength = @a;

for (my $i=0; $i < $aLength; $i++) {
	my $checkLine = $a[$i];
	my $countyName = "";
	my $cityName = "";
	my $stateName = "";
	if ($checkLine =~ m/ County<\/a><\/td>/) {
		if ($checkLine =~ m/>(\w+\s+[\w|\s]*)</) {
			$countyName = $1;
		} else {
			if ($checkLine =~ m/>(\w+[-|\.|\s]+\w+\s\w+)</) {
				$countyName = $1;	
			} else {
				print "Error parsing line $checkLine\n";
				next;
			}
		}
		if ($checkLine =~ m/_(\w+\s*\w*)"/) {
			$stateName = $1;		
		}
		my $nextLine = $a[$i+2];
		if ($nextLine =~ m/>(\w+)</) {
			$cityName = $1;
		} elsif ($nextLine =~ m/>(\w+\s+[\w|\s]*)</) {
			$cityName = $1;
		} else {
			if ($nextLine =~ m/(\w+[-|\.|\s]+[\w+\s]*\w+)</) {
				$cityName = $1;
			} else {
				print "Error parsing value $nextLine\n";
				next;			
			}
		}
		my $countyCityString = "$countyName,$cityName,$stateName";
		push @b, $countyCityString;
		$i = $i+2;
	}
}
my $fout = "$f.txt";
open (my $fho, ">", $fout) or die "cannot open outfile $!\n"; 
foreach (@b) {
	my $sout = "$_\n";
	print $fho $sout;
}
close $fho;

####
# finally, python was again employed to match county to city, and create "urban" and "rural" flags.

# this worked for about 1/3 of the cities

#!/usr/bin/python
import re


l = []

with open('concatList.txt', 'r') as f:
	for i in f:
		i = i.rstrip('\r\n')
		iSplit = i.split(',')
		try:
			itms = (iSplit[1],(iSplit[2],iSplit[0]))
			l.append(itms)
		except IndexError:
			l.append((iSplit), (None, None))
cList = []
# "Alabama"#
with open('parsedAndFlaggedCitiesList.txt', 'r') as f:
	for i in f:
		i = i.rstrip('\r\n')
		cList.append(i)
		
currentState = ""
confirmedCountyList = []
unmatchedList = []
for itm in cList:
	m = re.search('#', itm)
	if m: 
		itmStrip = itm.replace('"', '')
		currentState = itmStrip[:-1]
		citiesInState = []
	else:
		itmSplit = itm.split('"')
		cityState = itmSplit[-1]
		cityStateSplit = cityState.split(',')
		city = cityStateSplit[0]
		city = city[1:]
		matched = False
		for cityTuple,stateTuple in l:
			if city == cityTuple:
				if stateTuple[0] == currentState:
					outputString = stateTuple[1] + ',' + stateTuple[0]
					confirmedCountyList.append((outputString, 'urban'))
					matched = True
		if not matched:
			unknownString = city + ',' + cityStateSplit[1]
			confirmedCountyList.append((unknownString, 'unknown'))
			unmatchedList.append((city,cityStateSplit[1]))
# llen = len(confirmedCountyList)
# print('Found matches for ' + str(llen) + ' cities, which are the following:')
for itm in confirmedCountyList:
	print(str(itm[0]) + ',' + str(itm[1]))

print('\n')
llen = len(unmatchedList)
print('Could not find matches for ' + str(llen) + ' cities, which are the following:')
for itm in unmatchedList:
	print(str(itm[0]) + ',' + str(itm[1]))



# The output list had to be curated and was error-prone.  However, all that was needed was to match the 
# high-population cities to their counties and flag these as urban.

# The final urban cities list was checked by creating a simple dictionary of the states
# then comparing it against a list of 50 states





